# password <- "a"
# schemaName = "LBRUSCATO"
# df = read.csv2("teste_pulse.csv", header = TRUE, sep = ";")
# tableName = "TESTE2"
#
# df <- df[,c(1:5)]
# print(tempdir())
path2TempFile <- paste0(tempdir(), "/bacenTransferTemporaryTable.csv")
.iniParameters(host = host, user = user, password = password)
.exportDataframe2CSV(df = df, path = path2TempFile)
.dropTableIfExists(schemaName = schemaName, tableName = tableName)
.createTable(schemaName = schemaName, df = df, tableName = tableName)
.transferTempFile2Vertica(schemaName = schemaName, tableName = tableName, path = path2TempFile)
# .rmTempFile(path2TempFile)
.rmParameters()
}
# install.packages("C:/Users/lbruscato/Desktop/bacen_0.1.0.tar.gz", repos = NULL, type="source")
#
# library(bacen)
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName = "LBRUSCATO"
df = read.csv2("teste_pulse.csv", header = TRUE, sep = ";")
tableName = "TESTE2"
# df <- df[,c(1:5)]
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = df,
tableName = tableName)
# temp <- df
# temp[is.na(temp$num_com_valor_na), "num_com_valor_na"] <- NULL
# Private function that exports dataframes to csv on a temporary directory
.exportDataframe2CSV <- function(df, path, sep = ";", dec = ".") {
write.table(df, file = path, row.names = FALSE, sep = sep, dec = dec)
}
# Private function that initialize connection parameters
.iniParameters <- function(host, user, password) {
library(RJDBC)
bacen_jdbcClassPath <<- gsub("/", "\\\\", system.file("java", "vertica-jdbc-7.2.1-0.jar", package = "bacen"))
# bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
}
# Private function that removes connection parameters
.rmParameters <- function() {
objs <- ls(pos = ".GlobalEnv")
rm(list = c("bacen_jdbcClassPath", "bacen_jdbcConnStr",
"bacen_jdbcUsr", "bacen_jdbcPwd", "bacen_driver"),
pos = ".GlobalEnv")
}
# Private function that drop table
.dropTableIfExists <- function(schemaName, tableName) {
query <- paste0("DROP TABLE IF EXISTS ", schemaName, ".", tableName, " ; ")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
# Private function that creates table with dataframe structure
.createTable <- function(schemaName, df, tableName) {
# identify columns names and types
if (is.null(ncol(df))) { # one column dataframe
columnsTypes <- class(df)
columnsNames <- "x"
} else {
columnsTypes <- sapply(df, class)
columnsNames <- colnames(df)
}
query <- paste0("CREATE TABLE ", schemaName, ".", tableName, " ( ")
for (i in 1:length(columnsTypes)) {
if (columnsTypes[i] == "numeric" | columnsTypes[i] == "integer")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " NUMERIC(37,12)" else " NUMERIC(37,12),")
else if (columnsTypes[i] == "character" | columnsTypes[i] == "factor")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " varchar(255)" else " varchar(255),")
else if (columnsTypes[i] == "logical")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " boolean" else " boolean,")
}
query <- paste0(query, ");")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
# Private function that removes temporary file
.rmTempFile <- function(path) {
if (file.exists(path)) file.remove(path)
}
# Private function that transfers file to vertica server
.transferTempFile2Vertica <- function(schemaName, tableName, path) {
query <- paste0("COPY ", schemaName, ".", tableName, " FROM LOCAL '", path, "' DELIMITER AS ';' NULL 'NA' ENCLOSED BY '\"' NO ESCAPE SKIP 1 DIRECT;")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
#' Function to exhibit all public functions of the package
#' @return list with all public functions of bacen library
#' @export
listBacenFunctions <- function() {
lsf.str("package:bacen")
}
#' Function that copy a dataframe from R to Vertica, creating SQL structure
#' @param host hostname of database or ip from database
#' @param user username to login in database
#' @param password password to login in database
#' @param schemaName schemaname in database to transfer dataframe in
#' @param df dataframe object to be transfered
#' @param tableName tablename to be created in database
#' @export
rertica <- function(host, user, password, schemaName, df, tableName) {
path2TempFile <- paste0(tempdir(), "/bacenTransferTemporaryTable.csv")
.iniParameters(host = host, user = user, password = password)
.exportDataframe2CSV(df = df, path = path2TempFile)
.dropTableIfExists(schemaName = schemaName, tableName = tableName)
.createTable(schemaName = schemaName, df = df, tableName = tableName)
.transferTempFile2Vertica(schemaName = schemaName, tableName = tableName, path = path2TempFile)
.rmTempFile(path2TempFile)
.rmParameters()
}
# install.packages("C:/Users/lbruscato/Desktop/bacen_0.1.0.tar.gz", repos = NULL, type="source")
#
# library(bacen)
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName = "LBRUSCATO"
df = read.csv2("teste_pulse.csv", header = TRUE, sep = ";")
tableName = "TESTE2"
# df <- df[,c(1:5)]
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = df,
tableName = tableName)
df2 <- dbSendQuery("select * from lbruscato.TESTE2")
# temp <- df
# temp[is.na(temp$num_com_valor_na), "num_com_valor_na"] <- NULL
# Private function that exports dataframes to csv on a temporary directory
.exportDataframe2CSV <- function(df, path, sep = ";", dec = ".") {
write.table(df, file = path, row.names = FALSE, sep = sep, dec = dec)
}
# Private function that initialize connection parameters
.iniParameters <- function(host, user, password) {
library(RJDBC)
bacen_jdbcClassPath <<- gsub("/", "\\\\", system.file("java", "vertica-jdbc-7.2.1-0.jar", package = "bacen"))
# bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
}
# Private function that removes connection parameters
.rmParameters <- function() {
objs <- ls(pos = ".GlobalEnv")
rm(list = c("bacen_jdbcClassPath", "bacen_jdbcConnStr",
"bacen_jdbcUsr", "bacen_jdbcPwd", "bacen_driver"),
pos = ".GlobalEnv")
}
# Private function that drop table
.dropTableIfExists <- function(schemaName, tableName) {
query <- paste0("DROP TABLE IF EXISTS ", schemaName, ".", tableName, " ; ")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
# Private function that creates table with dataframe structure
.createTable <- function(schemaName, df, tableName) {
# identify columns names and types
if (is.null(ncol(df))) { # one column dataframe
columnsTypes <- class(df)
columnsNames <- "x"
} else {
columnsTypes <- sapply(df, class)
columnsNames <- colnames(df)
}
query <- paste0("CREATE TABLE ", schemaName, ".", tableName, " ( ")
for (i in 1:length(columnsTypes)) {
if (columnsTypes[i] == "numeric" | columnsTypes[i] == "integer")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " NUMERIC(37,12)" else " NUMERIC(37,12),")
else if (columnsTypes[i] == "character" | columnsTypes[i] == "factor")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " varchar(255)" else " varchar(255),")
else if (columnsTypes[i] == "logical")
query <- paste0(query, " ", columnsNames[i], if (i == length(columnsTypes)) " boolean" else " boolean,")
}
query <- paste0(query, ");")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
# Private function that removes temporary file
.rmTempFile <- function(path) {
if (file.exists(path)) file.remove(path)
}
# Private function that transfers file to vertica server
.transferTempFile2Vertica <- function(schemaName, tableName, path) {
query <- paste0("COPY ", schemaName, ".", tableName, " FROM LOCAL '", path, "' DELIMITER AS ';' NULL 'NA' ENCLOSED BY '\"' NO ESCAPE SKIP 1 DIRECT;")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
dbSendUpdate(verticaConn, query)
dbDisconnect(verticaConn)
}
#' Function to exhibit all public functions of the package
#' @return list with all public functions of bacen library
#' @export
listBacenFunctions <- function() {
lsf.str("package:bacen")
}
#' Function that copy a dataframe from R to Vertica, creating SQL structure
#' @param host hostname of database or ip from database
#' @param user username to login in database
#' @param password password to login in database
#' @param schemaName schemaname in database to transfer dataframe in
#' @param df dataframe object to be transfered
#' @param tableName tablename to be created in database
#' @export
rertica <- function(host, user, password, schemaName, df, tableName) {
path2TempFile <- paste0(tempdir(), "/bacenTransferTemporaryTable.csv")
.iniParameters(host = host, user = user, password = password)
.exportDataframe2CSV(df = df, path = path2TempFile)
.dropTableIfExists(schemaName = schemaName, tableName = tableName)
.createTable(schemaName = schemaName, df = df, tableName = tableName)
.transferTempFile2Vertica(schemaName = schemaName, tableName = tableName, path = path2TempFile)
.rmTempFile(path2TempFile)
.rmParameters()
}
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName = "LBRUSCATO"
df = read.csv2("teste_pulse.csv", header = TRUE, sep = ";")
tableName = "TESTE2"
View(df)
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = df,
tableName = tableName)
df2 <- dbSendQuery("select * from lbruscato.TESTE2")
library(RJDBC)
library(RJDBC)
bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
# bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbSendQuery("select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbSendQuery("select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbSendQuery("select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
df2 <- dbSendQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
library(RJDBC)
bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbSendQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
View(df2)
df2 <- dbSendQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbSendQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
View(df2)
dbDisconnect(verticaConn)
df2 <- dbGetTables(conn = verticaConn, "select * from lbruscato.TESTE2")
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbGetTables(conn = verticaConn, "select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
View(df2)
library(RJDBC)
bacen_jdbcClassPath <<- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <<- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <<- user
bacen_jdbcPwd <<- password
bacen_driver <<- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
df2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
dbDisconnect(verticaConn)
View(df2)
View(df)
View(df2)
all.equal(df, df2)
columnsTypes1 <- sapply(df, class)
columnsTypes2 <- sapply(df2, class)
columnsTypes1
columnsTypes2
write.table(df2, "teste2.csv")
df3 = read.csv2("teste2.csv", header = TRUE, sep = ";")
View(df3)
write.table(df2, "teste2.csv", sep = ";")
df3 = read.csv2("teste2.csv", header = TRUE, sep = ";")
columnsTypes3 <- sapply(df3, class)
columnsTypes1 <- sapply(df, class)
columnsTypes3 <- sapply(df3, class)
columnsTypes3
types <- data.frame(columnsTypes1, columnsTypes3)
View(types)
getwd()
install.packages("../bacen_0.1.0.tar.gz", repos = NULL, type="source")
library(bacen)
detach("package:bacen", unload=TRUE)
getwd()
library("bacen", lib.loc="~/R/win-library/3.4")
remove.packages("bacen", lib="~/R/win-library/3.4")
install.packages("../bacen_0.1.0.tar.gz", repos = NULL, type="source")
library(bacen)
# Temporary directory and name of temp file
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
# Test 1
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName = "LBRUSCATO"
df = read.csv2("test1_1.csv", header = TRUE, sep = ";")
tableName = "test1_1"
test1_1 = read.csv2("test1_1.csv", header = TRUE, sep = ";")
test1_1 <- read.csv2("test1_1.csv", header = TRUE, sep = ";")
test1_1 <- read.csv2("../tests_bacen/test1_1.csv", header = TRUE, sep = ";")
tableName <- "test1_1"
View(test1_1)
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = df,
tableName = tableName)
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test1_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test1_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.TESTE2")
test1_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test1_1")
dbDisconnect(verticaConn)
write.table(test1_2, "test1_2.csv", sep = ";")
test1_2 <- read.csv2("test1_2.csv", header = TRUE, sep = ";")
all.equal(test1_1, test1_2)
View(test1_1)
View(test1_2)
test1_1 <- read.csv2("../tests_bacen/test1_1.csv", header = TRUE, sep = ";")
View(test1_1)
options(digits = 5)
View(test1_1)
all.equal(test1_1, test1_2)
# Test 2
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName <- "LBRUSCATO"
test2_1 <- read.csv2("../tests_bacen/test2_1.csv", header = TRUE, sep = ";")
tableName <- "test2_1"
View(test2_1)
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test2_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test2_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test2_1")
dbDisconnect(verticaConn)
write.table(test2_2, "test2_2.csv", sep = ";")
test2_2 <- read.csv2("test2_2.csv", header = TRUE, sep = ";")
all.equal(test2_1, test2_2)
View(test2_1)
View(test2_1$shipTypeCode)
View(test2_2$shipTypeCode)
install.packages("../bacen_0.1.0.tar.gz", repos = NULL, type="source")
library(bacen)
# Temporary directory and name of temp file
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
# Test 1
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName <- "LBRUSCATO"
test1_1 <- read.csv2("../tests_bacen/test1_1.csv", header = TRUE, sep = ";")
tableName <- "test1_1"
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test1_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test1_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test1_1")
dbDisconnect(verticaConn)
write.table(test1_2, "../tests_bacen/test1_2.csv", sep = ";")
test1_2 <- read.csv2("../tests_bacen/test1_2.csv", header = TRUE, sep = ";")
all.equal(test1_1, test1_2)
# Test 2
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName <- "LBRUSCATO"
test2_1 <- read.csv2("../tests_bacen/test2_1.csv", header = TRUE, sep = ";")
tableName <- "test2_1"
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test2_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test2_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test2_1")
dbDisconnect(verticaConn)
write.table(test2_2, "../tests_bacen/test2_2.csv", sep = ";")
test2_2 <- read.csv2("../tests_bacen/test2_2.csv", header = TRUE, sep = ";")
all.equal(test2_1, test2_2)
install.packages("../bacen_0.1.0.tar.gz", repos = NULL, type="source")
library(bacen)
# Temporary directory and name of temp file
print(paste0(tempdir(), "/bacenTransferTemporaryTable.csv"))
# Test 1
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName <- "LBRUSCATO"
test1_1 <- read.csv2("../tests_bacen/test1_1.csv", header = TRUE, sep = ";")
tableName <- "test1_1"
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test1_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test1_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test1_1")
dbDisconnect(verticaConn)
write.table(test1_2, "../tests_bacen/test1_2.csv", sep = ";")
test1_2 <- read.csv2("../tests_bacen/test1_2.csv", header = TRUE, sep = ";")
all.equal(test1_1, test1_2)
# Test 2
host <- "//a1-zueira1:5433/okane"
user <- Sys.info()[["user"]]
password <- "a"
schemaName <- "LBRUSCATO"
test2_1 <- read.csv2("../tests_bacen/test2_1.csv", header = TRUE, sep = ";")
tableName <- "test2_1"
rertica(host = host,
user = user,
password = password,
schemaName = schemaName,
df = test2_1,
tableName = tableName)
library(RJDBC)
bacen_jdbcClassPath <- "./inst/java/vertica-jdbc-7.2.1-0.jar"
bacen_jdbcConnStr <- paste0("jdbc:vertica:", host)
bacen_jdbcUsr <- user
bacen_jdbcPwd <- password
bacen_driver <- JDBC(driverClass="com.vertica.jdbc.Driver", bacen_jdbcClassPath)
verticaConn <- dbConnect(bacen_driver, bacen_jdbcConnStr, bacen_jdbcUsr, bacen_jdbcPwd)
test2_2 <- dbGetQuery(conn = verticaConn, "select * from lbruscato.test2_1")
dbDisconnect(verticaConn)
write.table(test2_2, "../tests_bacen/test2_2.csv", sep = ";")
test2_2 <- read.csv2("../tests_bacen/test2_2.csv", header = TRUE, sep = ";")
all.equal(test2_1, test2_2)
